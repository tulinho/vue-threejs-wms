//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 4/8/2021 11:06:32 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("YmModel", "FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard", RelationshipMultiplicity.One, typeof(YmModel.TrackYard), "TrackSections", RelationshipMultiplicity.Many, typeof(YmModel.TrackSection), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea", RelationshipMultiplicity.ZeroOrOne, typeof(YmModel.TrackArea), "TrackSections", RelationshipMultiplicity.Many, typeof(YmModel.TrackSection), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone", RelationshipMultiplicity.One, typeof(YmModel.TrackZone), "TrackZonesPieces", RelationshipMultiplicity.Many, typeof(YmModel.TrackZonesPiece), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ", RelationshipMultiplicity.ZeroOrOne, typeof(YmModel.TrackZone), "TrackZones_IdZonePrevZ", RelationshipMultiplicity.Many, typeof(YmModel.TrackZone), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY", RelationshipMultiplicity.ZeroOrOne, typeof(YmModel.TrackZone), "TrackZones_IdZonePrevY", RelationshipMultiplicity.Many, typeof(YmModel.TrackZone), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection", RelationshipMultiplicity.ZeroOrOne, typeof(YmModel.TrackSection), "TrackZones", RelationshipMultiplicity.Many, typeof(YmModel.TrackZone), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX", RelationshipMultiplicity.ZeroOrOne, typeof(YmModel.TrackZone), "TrackZones_IdZonePrevX", RelationshipMultiplicity.Many, typeof(YmModel.TrackZone), true)]
[assembly: EdmRelationshipAttribute("YmModel", "FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard", RelationshipMultiplicity.One, typeof(YmModel.TrackYard), "TrackAreas", RelationshipMultiplicity.Many, typeof(YmModel.TrackArea), true)]

#endregion

namespace YmModel
{

    #region YmEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class YmEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new YmEntities object.
        /// </summary>
        public YmEntities() :
                base(@"name=YMEntitiesConnectionString", "YmEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new YmEntities object using the connection string found in the 'YmEntities' section of the application configuration file.
        /// </summary>
        public YmEntities(string connectionString) :
                base(connectionString, "YmEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new YmEntities object.
        /// </summary>
        public YmEntities(EntityConnection connection) : base(connection, "YmEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }


        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackSection> TrackSections
        {
            get
            {
                if ((_TrackSections == null))
                {
                    _TrackSections = base.CreateObjectSet<TrackSection>("TrackSections");
                }
                return _TrackSections;
            }
        }
        private ObjectSet<TrackSection> _TrackSections;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackYard> TrackYards
        {
            get
            {
                if ((_TrackYards == null))
                {
                    _TrackYards = base.CreateObjectSet<TrackYard>("TrackYards");
                }
                return _TrackYards;
            }
        }
        private ObjectSet<TrackYard> _TrackYards;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackCoordPiece> TrackCoordPieces
        {
            get
            {
                if ((_TrackCoordPieces == null))
                {
                    _TrackCoordPieces = base.CreateObjectSet<TrackCoordPiece>("TrackCoordPieces");
                }
                return _TrackCoordPieces;
            }
        }
        private ObjectSet<TrackCoordPiece> _TrackCoordPieces;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackZonesPiece> TrackZonesPieces
        {
            get
            {
                if ((_TrackZonesPieces == null))
                {
                    _TrackZonesPieces = base.CreateObjectSet<TrackZonesPiece>("TrackZonesPieces");
                }
                return _TrackZonesPieces;
            }
        }
        private ObjectSet<TrackZonesPiece> _TrackZonesPieces;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackZone> TrackZones
        {
            get
            {
                if ((_TrackZones == null))
                {
                    _TrackZones = base.CreateObjectSet<TrackZone>("TrackZones");
                }
                return _TrackZones;
            }
        }
        private ObjectSet<TrackZone> _TrackZones;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackZoneDeletedHist> TrackZoneDeletedHists
        {
            get
            {
                if ((_TrackZoneDeletedHists == null))
                {
                    _TrackZoneDeletedHists = base.CreateObjectSet<TrackZoneDeletedHist>("TrackZoneDeletedHists");
                }
                return _TrackZoneDeletedHists;
            }
        }
        private ObjectSet<TrackZoneDeletedHist> _TrackZoneDeletedHists;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackArea> TrackAreas
        {
            get
            {
                if ((_TrackAreas == null))
                {
                    _TrackAreas = base.CreateObjectSet<TrackArea>("TrackAreas");
                }
                return _TrackAreas;
            }
        }
        private ObjectSet<TrackArea> _TrackAreas;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackSections EntitySet.
        /// </summary>
        public void AddToTrackSections(TrackSection trackSection)
        {
            base.AddObject("TrackSections", trackSection);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackYards EntitySet.
        /// </summary>
        public void AddToTrackYards(TrackYard trackYard)
        {
            base.AddObject("TrackYards", trackYard);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackCoordPieces EntitySet.
        /// </summary>
        public void AddToTrackCoordPieces(TrackCoordPiece trackCoordPiece)
        {
            base.AddObject("TrackCoordPieces", trackCoordPiece);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackZonesPieces EntitySet.
        /// </summary>
        public void AddToTrackZonesPieces(TrackZonesPiece trackZonesPiece)
        {
            base.AddObject("TrackZonesPieces", trackZonesPiece);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackZones EntitySet.
        /// </summary>
        public void AddToTrackZones(TrackZone trackZone)
        {
            base.AddObject("TrackZones", trackZone);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackZoneDeletedHists EntitySet.
        /// </summary>
        public void AddToTrackZoneDeletedHists(TrackZoneDeletedHist trackZoneDeletedHist)
        {
            base.AddObject("TrackZoneDeletedHists", trackZoneDeletedHist);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrackAreas EntitySet.
        /// </summary>
        public void AddToTrackAreas(TrackArea trackArea)
        {
            base.AddObject("TrackAreas", trackArea);
        }

        #endregion
    }

    #endregion
}

namespace YmModel
{

    /// <summary>
    /// special areas (Slow Cooling Area,…) defined as an rectangle. No overlaps between sections are allowed!
    /// </summary>
    /// <KeyProperties>
    /// Section
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackSection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackSection : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackSection object.
        /// </summary>
        /// <param name="section">Initial value of Section.</param>
        /// <param name="yard">Initial value of Yard.</param>
        /// <param name="offsetX">Initial value of OffsetX.</param>
        /// <param name="offsetY">Initial value of OffsetY.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackSection CreateTrackSection(string section, string yard, int offsetX, int offsetY, global::System.DateTime modifLast)
        {
            TrackSection trackSection = new TrackSection();
            trackSection.Section = section;
            trackSection.Yard = yard;
            trackSection.OffsetX = offsetX;
            trackSection.OffsetY = offsetY;
            trackSection.ModifLast = modifLast;
            return trackSection;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Identifier of the occupancy section.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Section
        {
            get
            {
                string value = _Section;
                OnGetSection(ref value);
                return value;
            }
            set
            {
                if (_Section != value)
                {
                  OnSectionChanging(ref value);
                  ReportPropertyChanging("Section");
                  _Section = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Section");
                  OnSectionChanged();
              }
            }
        }
        private string _Section;
        partial void OnGetSection(ref string value);
        partial void OnSectionChanging(ref string value);
        partial void OnSectionChanged();
    
        /// <summary>
        /// referenced Yard Id
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Yard
        {
            get
            {
                string value = _Yard;
                OnGetYard(ref value);
                return value;
            }
            set
            {
                if (_Yard != value)
                {
                  OnYardChanging(ref value);
                  ReportPropertyChanging("Yard");
                  _Yard = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Yard");
                  OnYardChanged();
              }
            }
        }
        private string _Yard;
        partial void OnGetYard(ref string value);
        partial void OnYardChanging(ref string value);
        partial void OnYardChanged();
    
        /// <summary>
        /// referenced Area
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Area
        {
            get
            {
                string value = _Area;
                OnGetArea(ref value);
                return value;
            }
            set
            {
                if (_Area != value)
                {
                  OnAreaChanging(ref value);
                  ReportPropertyChanging("Area");
                  _Area = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Area");
                  OnAreaChanged();
              }
            }
        }
        private string _Area;
        partial void OnGetArea(ref string value);
        partial void OnAreaChanging(ref string value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// Description abou the section
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// offset of the area measured from an Origin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OffsetX
        {
            get
            {
                int value = _OffsetX;
                OnGetOffsetX(ref value);
                return value;
            }
            set
            {
                if (_OffsetX != value)
                {
                  OnOffsetXChanging(ref value);
                  ReportPropertyChanging("OffsetX");
                  _OffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OffsetX");
                  OnOffsetXChanged();
              }
            }
        }
        private int _OffsetX;
        partial void OnGetOffsetX(ref int value);
        partial void OnOffsetXChanging(ref int value);
        partial void OnOffsetXChanged();
    
        /// <summary>
        /// offset of the area measured from an Origin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OffsetY
        {
            get
            {
                int value = _OffsetY;
                OnGetOffsetY(ref value);
                return value;
            }
            set
            {
                if (_OffsetY != value)
                {
                  OnOffsetYChanging(ref value);
                  ReportPropertyChanging("OffsetY");
                  _OffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OffsetY");
                  OnOffsetYChanged();
              }
            }
        }
        private int _OffsetY;
        partial void OnGetOffsetY(ref int value);
        partial void OnOffsetYChanging(ref int value);
        partial void OnOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in x direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetX
        {
            get
            {
                int? value = _CameraOffsetX;
                OnGetCameraOffsetX(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetX != value)
                {
                  OnCameraOffsetXChanging(ref value);
                  ReportPropertyChanging("CameraOffsetX");
                  _CameraOffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetX");
                  OnCameraOffsetXChanged();
              }
            }
        }
        private int? _CameraOffsetX;
        partial void OnGetCameraOffsetX(ref int? value);
        partial void OnCameraOffsetXChanging(ref int? value);
        partial void OnCameraOffsetXChanged();
    
        /// <summary>
        /// default Camera Offset in y direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetY
        {
            get
            {
                int? value = _CameraOffsetY;
                OnGetCameraOffsetY(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetY != value)
                {
                  OnCameraOffsetYChanging(ref value);
                  ReportPropertyChanging("CameraOffsetY");
                  _CameraOffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetY");
                  OnCameraOffsetYChanged();
              }
            }
        }
        private int? _CameraOffsetY;
        partial void OnGetCameraOffsetY(ref int? value);
        partial void OnCameraOffsetYChanging(ref int? value);
        partial void OnCameraOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in z direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetZ
        {
            get
            {
                int? value = _CameraOffsetZ;
                OnGetCameraOffsetZ(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetZ != value)
                {
                  OnCameraOffsetZChanging(ref value);
                  ReportPropertyChanging("CameraOffsetZ");
                  _CameraOffsetZ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetZ");
                  OnCameraOffsetZChanged();
              }
            }
        }
        private int? _CameraOffsetZ;
        partial void OnGetCameraOffsetZ(ref int? value);
        partial void OnCameraOffsetZChanging(ref int? value);
        partial void OnCameraOffsetZChanged();
    
        /// <summary>
        /// default Camera Angle measured from x to y in [RAD]. 0=camera looks parallel to X PI/2=camera looks prallel to Y
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleXy
        {
            get
            {
                double? value = _CameraAngleXy;
                OnGetCameraAngleXy(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleXy != value)
                {
                  OnCameraAngleXyChanging(ref value);
                  ReportPropertyChanging("CameraAngleXy");
                  _CameraAngleXy = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleXy");
                  OnCameraAngleXyChanged();
              }
            }
        }
        private double? _CameraAngleXy;
        partial void OnGetCameraAngleXy(ref double? value);
        partial void OnCameraAngleXyChanging(ref double? value);
        partial void OnCameraAngleXyChanged();
    
        /// <summary>
        /// default Camera Angle measured from y to z in [RAD]. 0=camera looks parallel to Y PI/2=camera looks prallel to Z
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleYz
        {
            get
            {
                double? value = _CameraAngleYz;
                OnGetCameraAngleYz(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleYz != value)
                {
                  OnCameraAngleYzChanging(ref value);
                  ReportPropertyChanging("CameraAngleYz");
                  _CameraAngleYz = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleYz");
                  OnCameraAngleYzChanged();
              }
            }
        }
        private double? _CameraAngleYz;
        partial void OnGetCameraAngleYz(ref double? value);
        partial void OnCameraAngleYzChanging(ref double? value);
        partial void OnCameraAngleYzChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrackYard in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard")]
        public virtual TrackYard TrackYard
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackYard in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackYard> TrackYardReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackYard>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackYard").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackArea in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea")]
        public virtual TrackArea TrackArea
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackArea>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackArea>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackArea in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackArea> TrackAreaReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackArea>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackArea>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackArea>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackArea").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZones in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackZones")]
        public virtual EntityCollection<TrackZone> TrackZones
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackZones");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackZones", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// Tracking coordinates for the yard system
    /// </summary>
    /// <KeyProperties>
    /// Yard
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackYard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackYard : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackYard object.
        /// </summary>
        /// <param name="yard">Initial value of Yard.</param>
        /// <param name="yardType">Initial value of YardType.</param>
        /// <param name="offsetX">Initial value of OffsetX.</param>
        /// <param name="offsetY">Initial value of OffsetY.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackYard CreateTrackYard(string yard, string yardType, int offsetX, int offsetY, global::System.DateTime modifLast)
        {
            TrackYard trackYard = new TrackYard();
            trackYard.Yard = yard;
            trackYard.YardType = yardType;
            trackYard.OffsetX = offsetX;
            trackYard.OffsetY = offsetY;
            trackYard.ModifLast = modifLast;
            return trackYard;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// YARD ID. Unique Name of the Yard
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Yard
        {
            get
            {
                string value = _Yard;
                OnGetYard(ref value);
                return value;
            }
            set
            {
                if (_Yard != value)
                {
                  OnYardChanging(ref value);
                  ReportPropertyChanging("Yard");
                  _Yard = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Yard");
                  OnYardChanged();
              }
            }
        }
        private string _Yard;
        partial void OnGetYard(ref string value);
        partial void OnYardChanging(ref string value);
        partial void OnYardChanged();
    
        /// <summary>
        /// S&apos;=Slab &apos;P&apos;=Plate &apos;C&apos;=Coil
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string YardType
        {
            get
            {
                string value = _YardType;
                OnGetYardType(ref value);
                return value;
            }
            set
            {
                if (_YardType != value)
                {
                  OnYardTypeChanging(ref value);
                  ReportPropertyChanging("YardType");
                  _YardType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("YardType");
                  OnYardTypeChanged();
              }
            }
        }
        private string _YardType;
        partial void OnGetYardType(ref string value);
        partial void OnYardTypeChanging(ref string value);
        partial void OnYardTypeChanged();
    
        /// <summary>
        /// Description of the Yard
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// offset of the area measured from an Origin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OffsetX
        {
            get
            {
                int value = _OffsetX;
                OnGetOffsetX(ref value);
                return value;
            }
            set
            {
                if (_OffsetX != value)
                {
                  OnOffsetXChanging(ref value);
                  ReportPropertyChanging("OffsetX");
                  _OffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OffsetX");
                  OnOffsetXChanged();
              }
            }
        }
        private int _OffsetX;
        partial void OnGetOffsetX(ref int value);
        partial void OnOffsetXChanging(ref int value);
        partial void OnOffsetXChanged();
    
        /// <summary>
        /// offset of the area measured from an Origin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OffsetY
        {
            get
            {
                int value = _OffsetY;
                OnGetOffsetY(ref value);
                return value;
            }
            set
            {
                if (_OffsetY != value)
                {
                  OnOffsetYChanging(ref value);
                  ReportPropertyChanging("OffsetY");
                  _OffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OffsetY");
                  OnOffsetYChanged();
              }
            }
        }
        private int _OffsetY;
        partial void OnGetOffsetY(ref int value);
        partial void OnOffsetYChanging(ref int value);
        partial void OnOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in x direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetX
        {
            get
            {
                int? value = _CameraOffsetX;
                OnGetCameraOffsetX(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetX != value)
                {
                  OnCameraOffsetXChanging(ref value);
                  ReportPropertyChanging("CameraOffsetX");
                  _CameraOffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetX");
                  OnCameraOffsetXChanged();
              }
            }
        }
        private int? _CameraOffsetX;
        partial void OnGetCameraOffsetX(ref int? value);
        partial void OnCameraOffsetXChanging(ref int? value);
        partial void OnCameraOffsetXChanged();
    
        /// <summary>
        /// default Camera Offset in y direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetY
        {
            get
            {
                int? value = _CameraOffsetY;
                OnGetCameraOffsetY(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetY != value)
                {
                  OnCameraOffsetYChanging(ref value);
                  ReportPropertyChanging("CameraOffsetY");
                  _CameraOffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetY");
                  OnCameraOffsetYChanged();
              }
            }
        }
        private int? _CameraOffsetY;
        partial void OnGetCameraOffsetY(ref int? value);
        partial void OnCameraOffsetYChanging(ref int? value);
        partial void OnCameraOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in z direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetZ
        {
            get
            {
                int? value = _CameraOffsetZ;
                OnGetCameraOffsetZ(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetZ != value)
                {
                  OnCameraOffsetZChanging(ref value);
                  ReportPropertyChanging("CameraOffsetZ");
                  _CameraOffsetZ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetZ");
                  OnCameraOffsetZChanged();
              }
            }
        }
        private int? _CameraOffsetZ;
        partial void OnGetCameraOffsetZ(ref int? value);
        partial void OnCameraOffsetZChanging(ref int? value);
        partial void OnCameraOffsetZChanged();
    
        /// <summary>
        /// default Camera Angle measured from x to y in [RAD]. 0=camera looks parallel to X PI/2=camera looks prallel to Y
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleXy
        {
            get
            {
                double? value = _CameraAngleXy;
                OnGetCameraAngleXy(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleXy != value)
                {
                  OnCameraAngleXyChanging(ref value);
                  ReportPropertyChanging("CameraAngleXy");
                  _CameraAngleXy = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleXy");
                  OnCameraAngleXyChanged();
              }
            }
        }
        private double? _CameraAngleXy;
        partial void OnGetCameraAngleXy(ref double? value);
        partial void OnCameraAngleXyChanging(ref double? value);
        partial void OnCameraAngleXyChanged();
    
        /// <summary>
        /// default Camera Angle measured from y to z in [RAD]. 0=camera looks parallel to Y PI/2=camera looks prallel to Z
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleYz
        {
            get
            {
                double? value = _CameraAngleYz;
                OnGetCameraAngleYz(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleYz != value)
                {
                  OnCameraAngleYzChanging(ref value);
                  ReportPropertyChanging("CameraAngleYz");
                  _CameraAngleYz = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleYz");
                  OnCameraAngleYzChanged();
              }
            }
        }
        private double? _CameraAngleYz;
        partial void OnGetCameraAngleYz(ref double? value);
        partial void OnCameraAngleYzChanging(ref double? value);
        partial void OnCameraAngleYzChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrackSections in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_39_TRACK_SECTION_TRACK_PK_1", "TrackSections")]
        public virtual EntityCollection<TrackSection> TrackSections
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackSection>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackSections");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackSection>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_1", "TrackSections", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackAreas in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackAreas")]
        public virtual EntityCollection<TrackArea> TrackAreas
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackArea>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackAreas");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackArea>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackAreas", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// Tracking coordinates of pieces in the yard system.
    /// </summary>
    /// <KeyProperties>
    /// IdPiece
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackCoordPiece")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackCoordPiece : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackCoordPiece object.
        /// </summary>
        /// <param name="idPiece">Initial value of IdPiece.</param>
        /// <param name="posX">Initial value of PosX.</param>
        /// <param name="posY">Initial value of PosY.</param>
        /// <param name="posZ">Initial value of PosZ.</param>
        /// <param name="xAlignment">Initial value of XAlignment.</param>
        /// <param name="yAlignment">Initial value of YAlignment.</param>
        /// <param name="rotateAngle">Initial value of RotateAngle.</param>
        /// <param name="tiltAngle">Initial value of TiltAngle.</param>
        /// <param name="flagOutOfTrack">Initial value of FlagOutOfTrack.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackCoordPiece CreateTrackCoordPiece(string idPiece, int posX, int posY, int posZ, int xAlignment, int yAlignment, int rotateAngle, int tiltAngle, bool flagOutOfTrack, global::System.DateTime modifLast)
        {
            TrackCoordPiece trackCoordPiece = new TrackCoordPiece();
            trackCoordPiece.IdPiece = idPiece;
            trackCoordPiece.PosX = posX;
            trackCoordPiece.PosY = posY;
            trackCoordPiece.PosZ = posZ;
            trackCoordPiece.XAlignment = xAlignment;
            trackCoordPiece.YAlignment = yAlignment;
            trackCoordPiece.RotateAngle = rotateAngle;
            trackCoordPiece.TiltAngle = tiltAngle;
            trackCoordPiece.FlagOutOfTrack = flagOutOfTrack;
            trackCoordPiece.ModifLast = modifLast;
            return trackCoordPiece;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Piece Id
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string IdPiece
        {
            get
            {
                string value = _IdPiece;
                OnGetIdPiece(ref value);
                return value;
            }
            set
            {
                if (_IdPiece != value)
                {
                  OnIdPieceChanging(ref value);
                  ReportPropertyChanging("IdPiece");
                  _IdPiece = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("IdPiece");
                  OnIdPieceChanged();
              }
            }
        }
        private string _IdPiece;
        partial void OnGetIdPiece(ref string value);
        partial void OnIdPieceChanging(ref string value);
        partial void OnIdPieceChanged();
    
        /// <summary>
        /// Piece identification of PPS (Production Planning System) (key identification)
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string IdL3
        {
            get
            {
                string value = _IdL3;
                OnGetIdL3(ref value);
                return value;
            }
            set
            {
                if (_IdL3 != value)
                {
                  OnIdL3Changing(ref value);
                  ReportPropertyChanging("IdL3");
                  _IdL3 = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("IdL3");
                  OnIdL3Changed();
              }
            }
        }
        private string _IdL3;
        partial void OnGetIdL3(ref string value);
        partial void OnIdL3Changing(ref string value);
        partial void OnIdL3Changed();
    
        /// <summary>
        /// X-coordinate of piece head
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosX
        {
            get
            {
                int value = _PosX;
                OnGetPosX(ref value);
                return value;
            }
            set
            {
                if (_PosX != value)
                {
                  OnPosXChanging(ref value);
                  ReportPropertyChanging("PosX");
                  _PosX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosX");
                  OnPosXChanged();
              }
            }
        }
        private int _PosX;
        partial void OnGetPosX(ref int value);
        partial void OnPosXChanging(ref int value);
        partial void OnPosXChanged();
    
        /// <summary>
        /// Y-coordinate of piece head
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosY
        {
            get
            {
                int value = _PosY;
                OnGetPosY(ref value);
                return value;
            }
            set
            {
                if (_PosY != value)
                {
                  OnPosYChanging(ref value);
                  ReportPropertyChanging("PosY");
                  _PosY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosY");
                  OnPosYChanged();
              }
            }
        }
        private int _PosY;
        partial void OnGetPosY(ref int value);
        partial void OnPosYChanging(ref int value);
        partial void OnPosYChanged();
    
        /// <summary>
        /// Z-coordinate of piece head
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosZ
        {
            get
            {
                int value = _PosZ;
                OnGetPosZ(ref value);
                return value;
            }
            set
            {
                if (_PosZ != value)
                {
                  OnPosZChanging(ref value);
                  ReportPropertyChanging("PosZ");
                  _PosZ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosZ");
                  OnPosZChanged();
              }
            }
        }
        private int _PosZ;
        partial void OnGetPosZ(ref int value);
        partial void OnPosZChanging(ref int value);
        partial void OnPosZChanged();
    
        /// <summary>
        /// alignment of pieces in x-direction:;0 - downstream;1 - upstream;2 - center
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int XAlignment
        {
            get
            {
                int value = _XAlignment;
                OnGetXAlignment(ref value);
                return value;
            }
            set
            {
                if (_XAlignment != value)
                {
                  OnXAlignmentChanging(ref value);
                  ReportPropertyChanging("XAlignment");
                  _XAlignment = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("XAlignment");
                  OnXAlignmentChanged();
              }
            }
        }
        private int _XAlignment = 2;
        partial void OnGetXAlignment(ref int value);
        partial void OnXAlignmentChanging(ref int value);
        partial void OnXAlignmentChanged();
    
        /// <summary>
        /// alignment of pieces in y-direction:;0 - downstream;1 - upstream;2 - center
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int YAlignment
        {
            get
            {
                int value = _YAlignment;
                OnGetYAlignment(ref value);
                return value;
            }
            set
            {
                if (_YAlignment != value)
                {
                  OnYAlignmentChanging(ref value);
                  ReportPropertyChanging("YAlignment");
                  _YAlignment = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("YAlignment");
                  OnYAlignmentChanged();
              }
            }
        }
        private int _YAlignment = 2;
        partial void OnGetYAlignment(ref int value);
        partial void OnYAlignmentChanging(ref int value);
        partial void OnYAlignmentChanged();
    
        /// <summary>
        /// rotate angle of piece:;0 - 0 degree;1 - 90 degree;2 - 180 degree;3 - 270 degree
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int RotateAngle
        {
            get
            {
                int value = _RotateAngle;
                OnGetRotateAngle(ref value);
                return value;
            }
            set
            {
                if (_RotateAngle != value)
                {
                  OnRotateAngleChanging(ref value);
                  ReportPropertyChanging("RotateAngle");
                  _RotateAngle = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RotateAngle");
                  OnRotateAngleChanged();
              }
            }
        }
        private int _RotateAngle = 0;
        partial void OnGetRotateAngle(ref int value);
        partial void OnRotateAngleChanging(ref int value);
        partial void OnRotateAngleChanged();
    
        /// <summary>
        /// tilt angle of piece:;0 - 0 degree;1 - 90 degree (eye to the sky)
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TiltAngle
        {
            get
            {
                int value = _TiltAngle;
                OnGetTiltAngle(ref value);
                return value;
            }
            set
            {
                if (_TiltAngle != value)
                {
                  OnTiltAngleChanging(ref value);
                  ReportPropertyChanging("TiltAngle");
                  _TiltAngle = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TiltAngle");
                  OnTiltAngleChanged();
              }
            }
        }
        private int _TiltAngle = 0;
        partial void OnGetTiltAngle(ref int value);
        partial void OnTiltAngleChanging(ref int value);
        partial void OnTiltAngleChanged();
    
        /// <summary>
        /// Flag indicating if the piece is still in tracking model.;0 = Piece is somewhere in tracking. Position coordinates are the current ones.;1 = Piece is no longer in tracking. Position coordinates are the last known ones.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool FlagOutOfTrack
        {
            get
            {
                bool value = _FlagOutOfTrack;
                OnGetFlagOutOfTrack(ref value);
                return value;
            }
            set
            {
                if (_FlagOutOfTrack != value)
                {
                  OnFlagOutOfTrackChanging(ref value);
                  ReportPropertyChanging("FlagOutOfTrack");
                  _FlagOutOfTrack = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FlagOutOfTrack");
                  OnFlagOutOfTrackChanged();
              }
            }
        }
        private bool _FlagOutOfTrack = false;
        partial void OnGetFlagOutOfTrack(ref bool value);
        partial void OnFlagOutOfTrackChanging(ref bool value);
        partial void OnFlagOutOfTrackChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion
    }

    /// <summary>
    /// Tracking zones occupied by piece
    /// </summary>
    /// <KeyProperties>
    /// IdPiece
    /// IdZone
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackZonesPiece")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackZonesPiece : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackZonesPiece object.
        /// </summary>
        /// <param name="idPiece">Initial value of IdPiece.</param>
        /// <param name="idZone">Initial value of IdZone.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackZonesPiece CreateTrackZonesPiece(string idPiece, int idZone, global::System.DateTime modifLast)
        {
            TrackZonesPiece trackZonesPiece = new TrackZonesPiece();
            trackZonesPiece.IdPiece = idPiece;
            trackZonesPiece.IdZone = idZone;
            trackZonesPiece.ModifLast = modifLast;
            return trackZonesPiece;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Piece Id
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string IdPiece
        {
            get
            {
                string value = _IdPiece;
                OnGetIdPiece(ref value);
                return value;
            }
            set
            {
                if (_IdPiece != value)
                {
                  OnIdPieceChanging(ref value);
                  ReportPropertyChanging("IdPiece");
                  _IdPiece = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("IdPiece");
                  OnIdPieceChanged();
              }
            }
        }
        private string _IdPiece;
        partial void OnGetIdPiece(ref string value);
        partial void OnIdPieceChanging(ref string value);
        partial void OnIdPieceChanged();
    
        /// <summary>
        /// Name Id of tracking zone where Piece with ID_PIECE is placed at Layer Z
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdZone
        {
            get
            {
                int value = _IdZone;
                OnGetIdZone(ref value);
                return value;
            }
            set
            {
                if (_IdZone != value)
                {
                  OnIdZoneChanging(ref value);
                  ReportPropertyChanging("IdZone");
                  _IdZone = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdZone");
                  OnIdZoneChanged();
              }
            }
        }
        private int _IdZone;
        partial void OnGetIdZone(ref int value);
        partial void OnIdZoneChanging(ref int value);
        partial void OnIdZoneChanged();
    
        /// <summary>
        /// 1= in this zone is the piece zero point laying
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual decimal? ZeroPoint
        {
            get
            {
                decimal? value = _ZeroPoint;
                OnGetZeroPoint(ref value);
                return value;
            }
            set
            {
                if (_ZeroPoint != value)
                {
                  OnZeroPointChanging(ref value);
                  ReportPropertyChanging("ZeroPoint");
                  _ZeroPoint = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ZeroPoint");
                  OnZeroPointChanged();
              }
            }
        }
        private decimal? _ZeroPoint;
        partial void OnGetZeroPoint(ref decimal? value);
        partial void OnZeroPointChanging(ref decimal? value);
        partial void OnZeroPointChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrackZone in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone")]
        public virtual TrackZone TrackZone
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackZone> TrackZoneReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackZone>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZone").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// Tracking zone information
    /// </summary>
    /// <KeyProperties>
    /// IdZone
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackZone")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackZone : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackZone object.
        /// </summary>
        /// <param name="idZone">Initial value of IdZone.</param>
        /// <param name="zone">Initial value of Zone.</param>
        /// <param name="zoneType">Initial value of ZoneType.</param>
        /// <param name="yard">Initial value of Yard.</param>
        /// <param name="status">Initial value of Status.</param>
        /// <param name="posXMin">Initial value of PosXMin.</param>
        /// <param name="posXMax">Initial value of PosXMax.</param>
        /// <param name="posYMin">Initial value of PosYMin.</param>
        /// <param name="posYMax">Initial value of PosYMax.</param>
        /// <param name="posZMin">Initial value of PosZMin.</param>
        /// <param name="posZMax">Initial value of PosZMax.</param>
        /// <param name="pieceCountMax">Initial value of PieceCountMax.</param>
        /// <param name="priority">Initial value of Priority.</param>
        /// <param name="xAlignment">Initial value of XAlignment.</param>
        /// <param name="yAlignment">Initial value of YAlignment.</param>
        /// <param name="rotateAngle">Initial value of RotateAngle.</param>
        /// <param name="tiltAngle">Initial value of TiltAngle.</param>
        /// <param name="genEventEnter">Initial value of GenEventEnter.</param>
        /// <param name="genEventExit">Initial value of GenEventExit.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackZone CreateTrackZone(int idZone, string zone, string zoneType, string yard, int status, int posXMin, int posXMax, int posYMin, int posYMax, int posZMin, int posZMax, int pieceCountMax, int priority, int xAlignment, int yAlignment, int rotateAngle, int tiltAngle, bool genEventEnter, bool genEventExit, global::System.DateTime modifLast)
        {
            TrackZone trackZone = new TrackZone();
            trackZone.IdZone = idZone;
            trackZone.Zone = zone;
            trackZone.ZoneType = zoneType;
            trackZone.Yard = yard;
            trackZone.Status = status;
            trackZone.PosXMin = posXMin;
            trackZone.PosXMax = posXMax;
            trackZone.PosYMin = posYMin;
            trackZone.PosYMax = posYMax;
            trackZone.PosZMin = posZMin;
            trackZone.PosZMax = posZMax;
            trackZone.PieceCountMax = pieceCountMax;
            trackZone.Priority = priority;
            trackZone.XAlignment = xAlignment;
            trackZone.YAlignment = yAlignment;
            trackZone.RotateAngle = rotateAngle;
            trackZone.TiltAngle = tiltAngle;
            trackZone.GenEventEnter = genEventEnter;
            trackZone.GenEventExit = genEventExit;
            trackZone.ModifLast = modifLast;
            return trackZone;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Zone Id coded as: YARD_ID*10000000 + AREA_ID*1000000 + SECTION_ID*10000 + COLUMN*100 + ROW*1
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdZone
        {
            get
            {
                int value = _IdZone;
                OnGetIdZone(ref value);
                return value;
            }
            set
            {
                if (_IdZone != value)
                {
                  OnIdZoneChanging(ref value);
                  ReportPropertyChanging("IdZone");
                  _IdZone = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdZone");
                  OnIdZoneChanged();
              }
            }
        }
        private int _IdZone;
        partial void OnGetIdZone(ref int value);
        partial void OnIdZoneChanging(ref int value);
        partial void OnIdZoneChanged();
    
        /// <summary>
        /// Zone Id  as a string
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Zone
        {
            get
            {
                string value = _Zone;
                OnGetZone(ref value);
                return value;
            }
            set
            {
                if (_Zone != value)
                {
                  OnZoneChanging(ref value);
                  ReportPropertyChanging("Zone");
                  _Zone = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Zone");
                  OnZoneChanged();
              }
            }
        }
        private string _Zone;
        partial void OnGetZone(ref string value);
        partial void OnZoneChanging(ref string value);
        partial void OnZoneChanged();
    
        /// <summary>
        /// Type of Track Zone: ;Y=Yard ;A=Area ;S=Section ;Z=Zone ;V = Virtual Zone;D = Device
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string ZoneType
        {
            get
            {
                string value = _ZoneType;
                OnGetZoneType(ref value);
                return value;
            }
            set
            {
                if (_ZoneType != value)
                {
                  OnZoneTypeChanging(ref value);
                  ReportPropertyChanging("ZoneType");
                  _ZoneType = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ZoneType");
                  OnZoneTypeChanged();
              }
            }
        }
        private string _ZoneType;
        partial void OnGetZoneType(ref string value);
        partial void OnZoneTypeChanging(ref string value);
        partial void OnZoneTypeChanged();
    
        /// <summary>
        /// Identifier of a tracking occupancy yard
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Yard
        {
            get
            {
                string value = _Yard;
                OnGetYard(ref value);
                return value;
            }
            set
            {
                if (_Yard != value)
                {
                  OnYardChanging(ref value);
                  ReportPropertyChanging("Yard");
                  _Yard = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Yard");
                  OnYardChanged();
              }
            }
        }
        private string _Yard;
        partial void OnGetYard(ref string value);
        partial void OnYardChanging(ref string value);
        partial void OnYardChanged();
    
        /// <summary>
        /// Identifier of a tracking occupancy area
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Area
        {
            get
            {
                string value = _Area;
                OnGetArea(ref value);
                return value;
            }
            set
            {
                if (_Area != value)
                {
                  OnAreaChanging(ref value);
                  ReportPropertyChanging("Area");
                  _Area = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Area");
                  OnAreaChanged();
              }
            }
        }
        private string _Area;
        partial void OnGetArea(ref string value);
        partial void OnAreaChanging(ref string value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// Identifier of a tracking occupancy section.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Section
        {
            get
            {
                string value = _Section;
                OnGetSection(ref value);
                return value;
            }
            set
            {
                if (_Section != value)
                {
                  OnSectionChanging(ref value);
                  ReportPropertyChanging("Section");
                  _Section = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Section");
                  OnSectionChanged();
              }
            }
        }
        private string _Section;
        partial void OnGetSection(ref string value);
        partial void OnSectionChanging(ref string value);
        partial void OnSectionChanged();
    
        /// <summary>
        /// Zone status: ;0=Normal ;10=Blocked
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Status
        {
            get
            {
                int value = _Status;
                OnGetStatus(ref value);
                return value;
            }
            set
            {
                if (_Status != value)
                {
                  OnStatusChanging(ref value);
                  ReportPropertyChanging("Status");
                  _Status = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Status");
                  OnStatusChanged();
              }
            }
        }
        private int _Status = 0;
        partial void OnGetStatus(ref int value);
        partial void OnStatusChanging(ref int value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// Hex Code Color Background (e.g. #6600cc)
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ColorBackground
        {
            get
            {
                string value = _ColorBackground;
                OnGetColorBackground(ref value);
                return value;
            }
            set
            {
                if (_ColorBackground != value)
                {
                  OnColorBackgroundChanging(ref value);
                  ReportPropertyChanging("ColorBackground");
                  _ColorBackground = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ColorBackground");
                  OnColorBackgroundChanged();
              }
            }
        }
        private string _ColorBackground;
        partial void OnGetColorBackground(ref string value);
        partial void OnColorBackgroundChanging(ref string value);
        partial void OnColorBackgroundChanged();
    
        /// <summary>
        /// Hex Code Color ForeGround (e.g. #6600cc)
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ColorForeground
        {
            get
            {
                string value = _ColorForeground;
                OnGetColorForeground(ref value);
                return value;
            }
            set
            {
                if (_ColorForeground != value)
                {
                  OnColorForegroundChanging(ref value);
                  ReportPropertyChanging("ColorForeground");
                  _ColorForeground = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ColorForeground");
                  OnColorForegroundChanged();
              }
            }
        }
        private string _ColorForeground;
        partial void OnGetColorForeground(ref string value);
        partial void OnColorForegroundChanging(ref string value);
        partial void OnColorForegroundChanged();
    
        /// <summary>
        /// Hex Code Color Frame (#6600cc)
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ColorFrame
        {
            get
            {
                string value = _ColorFrame;
                OnGetColorFrame(ref value);
                return value;
            }
            set
            {
                if (_ColorFrame != value)
                {
                  OnColorFrameChanging(ref value);
                  ReportPropertyChanging("ColorFrame");
                  _ColorFrame = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ColorFrame");
                  OnColorFrameChanged();
              }
            }
        }
        private string _ColorFrame;
        partial void OnGetColorFrame(ref string value);
        partial void OnColorFrameChanging(ref string value);
        partial void OnColorFrameChanged();
    
        /// <summary>
        /// X-coordinate of zone begin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosXMin
        {
            get
            {
                int value = _PosXMin;
                OnGetPosXMin(ref value);
                return value;
            }
            set
            {
                if (_PosXMin != value)
                {
                  OnPosXMinChanging(ref value);
                  ReportPropertyChanging("PosXMin");
                  _PosXMin = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosXMin");
                  OnPosXMinChanged();
              }
            }
        }
        private int _PosXMin;
        partial void OnGetPosXMin(ref int value);
        partial void OnPosXMinChanging(ref int value);
        partial void OnPosXMinChanged();
    
        /// <summary>
        /// X-coordinate of zone end
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosXMax
        {
            get
            {
                int value = _PosXMax;
                OnGetPosXMax(ref value);
                return value;
            }
            set
            {
                if (_PosXMax != value)
                {
                  OnPosXMaxChanging(ref value);
                  ReportPropertyChanging("PosXMax");
                  _PosXMax = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosXMax");
                  OnPosXMaxChanged();
              }
            }
        }
        private int _PosXMax;
        partial void OnGetPosXMax(ref int value);
        partial void OnPosXMaxChanging(ref int value);
        partial void OnPosXMaxChanged();
    
        /// <summary>
        /// Y-coordinate of zone begin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosYMin
        {
            get
            {
                int value = _PosYMin;
                OnGetPosYMin(ref value);
                return value;
            }
            set
            {
                if (_PosYMin != value)
                {
                  OnPosYMinChanging(ref value);
                  ReportPropertyChanging("PosYMin");
                  _PosYMin = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosYMin");
                  OnPosYMinChanged();
              }
            }
        }
        private int _PosYMin;
        partial void OnGetPosYMin(ref int value);
        partial void OnPosYMinChanging(ref int value);
        partial void OnPosYMinChanged();
    
        /// <summary>
        /// Y-coordinate of zone end
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosYMax
        {
            get
            {
                int value = _PosYMax;
                OnGetPosYMax(ref value);
                return value;
            }
            set
            {
                if (_PosYMax != value)
                {
                  OnPosYMaxChanging(ref value);
                  ReportPropertyChanging("PosYMax");
                  _PosYMax = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosYMax");
                  OnPosYMaxChanged();
              }
            }
        }
        private int _PosYMax;
        partial void OnGetPosYMax(ref int value);
        partial void OnPosYMaxChanging(ref int value);
        partial void OnPosYMaxChanged();
    
        /// <summary>
        /// Z-coordinate of zone begin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosZMin
        {
            get
            {
                int value = _PosZMin;
                OnGetPosZMin(ref value);
                return value;
            }
            set
            {
                if (_PosZMin != value)
                {
                  OnPosZMinChanging(ref value);
                  ReportPropertyChanging("PosZMin");
                  _PosZMin = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosZMin");
                  OnPosZMinChanged();
              }
            }
        }
        private int _PosZMin;
        partial void OnGetPosZMin(ref int value);
        partial void OnPosZMinChanging(ref int value);
        partial void OnPosZMinChanged();
    
        /// <summary>
        /// Z-coordinate of zone end
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PosZMax
        {
            get
            {
                int value = _PosZMax;
                OnGetPosZMax(ref value);
                return value;
            }
            set
            {
                if (_PosZMax != value)
                {
                  OnPosZMaxChanging(ref value);
                  ReportPropertyChanging("PosZMax");
                  _PosZMax = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PosZMax");
                  OnPosZMaxChanged();
              }
            }
        }
        private int _PosZMax;
        partial void OnGetPosZMax(ref int value);
        partial void OnPosZMaxChanging(ref int value);
        partial void OnPosZMaxChanged();
    
        /// <summary>
        /// Description used by HMI
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Previous tracking zone in X direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? IdZonePrevX
        {
            get
            {
                int? value = _IdZonePrevX;
                OnGetIdZonePrevX(ref value);
                return value;
            }
            set
            {
                if (_IdZonePrevX != value)
                {
                  OnIdZonePrevXChanging(ref value);
                  ReportPropertyChanging("IdZonePrevX");
                  _IdZonePrevX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdZonePrevX");
                  OnIdZonePrevXChanged();
              }
            }
        }
        private int? _IdZonePrevX;
        partial void OnGetIdZonePrevX(ref int? value);
        partial void OnIdZonePrevXChanging(ref int? value);
        partial void OnIdZonePrevXChanged();
    
        /// <summary>
        /// Previous tracking zone in Y direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? IdZonePrevY
        {
            get
            {
                int? value = _IdZonePrevY;
                OnGetIdZonePrevY(ref value);
                return value;
            }
            set
            {
                if (_IdZonePrevY != value)
                {
                  OnIdZonePrevYChanging(ref value);
                  ReportPropertyChanging("IdZonePrevY");
                  _IdZonePrevY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdZonePrevY");
                  OnIdZonePrevYChanged();
              }
            }
        }
        private int? _IdZonePrevY;
        partial void OnGetIdZonePrevY(ref int? value);
        partial void OnIdZonePrevYChanging(ref int? value);
        partial void OnIdZonePrevYChanged();
    
        /// <summary>
        /// Previous tracking zone in Z direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? IdZonePrevZ
        {
            get
            {
                int? value = _IdZonePrevZ;
                OnGetIdZonePrevZ(ref value);
                return value;
            }
            set
            {
                if (_IdZonePrevZ != value)
                {
                  OnIdZonePrevZChanging(ref value);
                  ReportPropertyChanging("IdZonePrevZ");
                  _IdZonePrevZ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdZonePrevZ");
                  OnIdZonePrevZChanged();
              }
            }
        }
        private int? _IdZonePrevZ;
        partial void OnGetIdZonePrevZ(ref int? value);
        partial void OnIdZonePrevZChanging(ref int? value);
        partial void OnIdZonePrevZChanged();
    
        /// <summary>
        /// default Camera Offset in x direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetX
        {
            get
            {
                int? value = _CameraOffsetX;
                OnGetCameraOffsetX(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetX != value)
                {
                  OnCameraOffsetXChanging(ref value);
                  ReportPropertyChanging("CameraOffsetX");
                  _CameraOffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetX");
                  OnCameraOffsetXChanged();
              }
            }
        }
        private int? _CameraOffsetX;
        partial void OnGetCameraOffsetX(ref int? value);
        partial void OnCameraOffsetXChanging(ref int? value);
        partial void OnCameraOffsetXChanged();
    
        /// <summary>
        /// default Camera Offset in y direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetY
        {
            get
            {
                int? value = _CameraOffsetY;
                OnGetCameraOffsetY(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetY != value)
                {
                  OnCameraOffsetYChanging(ref value);
                  ReportPropertyChanging("CameraOffsetY");
                  _CameraOffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetY");
                  OnCameraOffsetYChanged();
              }
            }
        }
        private int? _CameraOffsetY;
        partial void OnGetCameraOffsetY(ref int? value);
        partial void OnCameraOffsetYChanging(ref int? value);
        partial void OnCameraOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in z direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetZ
        {
            get
            {
                int? value = _CameraOffsetZ;
                OnGetCameraOffsetZ(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetZ != value)
                {
                  OnCameraOffsetZChanging(ref value);
                  ReportPropertyChanging("CameraOffsetZ");
                  _CameraOffsetZ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetZ");
                  OnCameraOffsetZChanged();
              }
            }
        }
        private int? _CameraOffsetZ;
        partial void OnGetCameraOffsetZ(ref int? value);
        partial void OnCameraOffsetZChanging(ref int? value);
        partial void OnCameraOffsetZChanged();
    
        /// <summary>
        /// default Camera Angle measured from x to y in [RAD]. 0=camera looks parallel to X PI/2=camera looks prallel to Y
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleXy
        {
            get
            {
                double? value = _CameraAngleXy;
                OnGetCameraAngleXy(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleXy != value)
                {
                  OnCameraAngleXyChanging(ref value);
                  ReportPropertyChanging("CameraAngleXy");
                  _CameraAngleXy = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleXy");
                  OnCameraAngleXyChanged();
              }
            }
        }
        private double? _CameraAngleXy;
        partial void OnGetCameraAngleXy(ref double? value);
        partial void OnCameraAngleXyChanging(ref double? value);
        partial void OnCameraAngleXyChanged();
    
        /// <summary>
        /// default Camera Angle measured from y to z in [RAD]. 0=camera looks parallel to Y PI/2=camera looks prallel to Z
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleYz
        {
            get
            {
                double? value = _CameraAngleYz;
                OnGetCameraAngleYz(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleYz != value)
                {
                  OnCameraAngleYzChanging(ref value);
                  ReportPropertyChanging("CameraAngleYz");
                  _CameraAngleYz = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleYz");
                  OnCameraAngleYzChanged();
              }
            }
        }
        private double? _CameraAngleYz;
        partial void OnGetCameraAngleYz(ref double? value);
        partial void OnCameraAngleYzChanging(ref double? value);
        partial void OnCameraAngleYzChanged();
    
        /// <summary>
        /// Maximal number of pieces:;  -1=not limited
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PieceCountMax
        {
            get
            {
                int value = _PieceCountMax;
                OnGetPieceCountMax(ref value);
                return value;
            }
            set
            {
                if (_PieceCountMax != value)
                {
                  OnPieceCountMaxChanging(ref value);
                  ReportPropertyChanging("PieceCountMax");
                  _PieceCountMax = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PieceCountMax");
                  OnPieceCountMaxChanged();
              }
            }
        }
        private int _PieceCountMax = 1;
        partial void OnGetPieceCountMax(ref int value);
        partial void OnPieceCountMaxChanging(ref int value);
        partial void OnPieceCountMaxChanged();
    
        /// <summary>
        /// priority of the zone. Higher values mean higher priority
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Priority
        {
            get
            {
                int value = _Priority;
                OnGetPriority(ref value);
                return value;
            }
            set
            {
                if (_Priority != value)
                {
                  OnPriorityChanging(ref value);
                  ReportPropertyChanging("Priority");
                  _Priority = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Priority");
                  OnPriorityChanged();
              }
            }
        }
        private int _Priority = 5;
        partial void OnGetPriority(ref int value);
        partial void OnPriorityChanging(ref int value);
        partial void OnPriorityChanged();
    
        /// <summary>
        /// alignment of pieces in x-direction:;0 - downstream;1 - upstream;2 - center
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int XAlignment
        {
            get
            {
                int value = _XAlignment;
                OnGetXAlignment(ref value);
                return value;
            }
            set
            {
                if (_XAlignment != value)
                {
                  OnXAlignmentChanging(ref value);
                  ReportPropertyChanging("XAlignment");
                  _XAlignment = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("XAlignment");
                  OnXAlignmentChanged();
              }
            }
        }
        private int _XAlignment = 2;
        partial void OnGetXAlignment(ref int value);
        partial void OnXAlignmentChanging(ref int value);
        partial void OnXAlignmentChanged();
    
        /// <summary>
        /// alignment of pieces in y-direction:;0 - downstream;1 - upstream;2 - center
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int YAlignment
        {
            get
            {
                int value = _YAlignment;
                OnGetYAlignment(ref value);
                return value;
            }
            set
            {
                if (_YAlignment != value)
                {
                  OnYAlignmentChanging(ref value);
                  ReportPropertyChanging("YAlignment");
                  _YAlignment = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("YAlignment");
                  OnYAlignmentChanged();
              }
            }
        }
        private int _YAlignment = 2;
        partial void OnGetYAlignment(ref int value);
        partial void OnYAlignmentChanging(ref int value);
        partial void OnYAlignmentChanged();
    
        /// <summary>
        /// rotate angle of piece:;0 - 0 degree;1 - 90 degree;2 - 180 degree;3 - 270 degree
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int RotateAngle
        {
            get
            {
                int value = _RotateAngle;
                OnGetRotateAngle(ref value);
                return value;
            }
            set
            {
                if (_RotateAngle != value)
                {
                  OnRotateAngleChanging(ref value);
                  ReportPropertyChanging("RotateAngle");
                  _RotateAngle = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RotateAngle");
                  OnRotateAngleChanged();
              }
            }
        }
        private int _RotateAngle = 0;
        partial void OnGetRotateAngle(ref int value);
        partial void OnRotateAngleChanging(ref int value);
        partial void OnRotateAngleChanged();
    
        /// <summary>
        /// tilt angle of piece:;0 - 0 degree;1 - 90 degree (eye to the sky)
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TiltAngle
        {
            get
            {
                int value = _TiltAngle;
                OnGetTiltAngle(ref value);
                return value;
            }
            set
            {
                if (_TiltAngle != value)
                {
                  OnTiltAngleChanging(ref value);
                  ReportPropertyChanging("TiltAngle");
                  _TiltAngle = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TiltAngle");
                  OnTiltAngleChanged();
              }
            }
        }
        private int _TiltAngle = 0;
        partial void OnGetTiltAngle(ref int value);
        partial void OnTiltAngleChanging(ref int value);
        partial void OnTiltAngleChanged();
    
        /// <summary>
        /// Enables sending event with information about piece entering the tracking zone.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool GenEventEnter
        {
            get
            {
                bool value = _GenEventEnter;
                OnGetGenEventEnter(ref value);
                return value;
            }
            set
            {
                if (_GenEventEnter != value)
                {
                  OnGenEventEnterChanging(ref value);
                  ReportPropertyChanging("GenEventEnter");
                  _GenEventEnter = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("GenEventEnter");
                  OnGenEventEnterChanged();
              }
            }
        }
        private bool _GenEventEnter = true;
        partial void OnGetGenEventEnter(ref bool value);
        partial void OnGenEventEnterChanging(ref bool value);
        partial void OnGenEventEnterChanged();
    
        /// <summary>
        /// Enables sending event with information about piece exiting the tracking zone.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool GenEventExit
        {
            get
            {
                bool value = _GenEventExit;
                OnGetGenEventExit(ref value);
                return value;
            }
            set
            {
                if (_GenEventExit != value)
                {
                  OnGenEventExitChanging(ref value);
                  ReportPropertyChanging("GenEventExit");
                  _GenEventExit = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("GenEventExit");
                  OnGenEventExitChanged();
              }
            }
        }
        private bool _GenEventExit = true;
        partial void OnGetGenEventExit(ref bool value);
        partial void OnGenEventExitChanging(ref bool value);
        partial void OnGenEventExitChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrackZonesPieces in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZonesPieces")]
        public virtual EntityCollection<TrackZonesPiece> TrackZonesPieces
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackZonesPiece>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZonesPieces");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackZonesPiece>("YmModel.FK_42_TRACK_ZONES_PIECE_T_PK_2", "TrackZonesPieces", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZones_IdZonePrevZ in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZones_IdZonePrevZ")]
        public virtual EntityCollection<TrackZone> TrackZones_IdZonePrevZ
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZones_IdZonePrevZ");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZones_IdZonePrevZ", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone_IdZonePrevZ in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ")]
        public virtual TrackZone TrackZone_IdZonePrevZ
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone_IdZonePrevZ in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackZone> TrackZone_IdZonePrevZReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_4", "TrackZone_IdZonePrevZ").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZones_IdZonePrevY in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZones_IdZonePrevY")]
        public virtual EntityCollection<TrackZone> TrackZones_IdZonePrevY
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZones_IdZonePrevY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZones_IdZonePrevY", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone_IdZonePrevY in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY")]
        public virtual TrackZone TrackZone_IdZonePrevY
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone_IdZonePrevY in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackZone> TrackZone_IdZonePrevYReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_3", "TrackZone_IdZonePrevY").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackSection in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection")]
        public virtual TrackSection TrackSection
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackSection>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackSection>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackSection in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackSection> TrackSectionReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackSection>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackSection>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackSection>("YmModel.FK_41_TRACK_ZONE_TRACK_SE_PK_1", "TrackSection").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZones_IdZonePrevX in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZones_IdZonePrevX")]
        public virtual EntityCollection<TrackZone> TrackZones_IdZonePrevX
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZones_IdZonePrevX");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZones_IdZonePrevX", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone_IdZonePrevX in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX")]
        public virtual TrackZone TrackZone_IdZonePrevX
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackZone_IdZonePrevX in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackZone> TrackZone_IdZonePrevXReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackZone>("YmModel.FK_41_TRACK_ZONE_TRACK_ZO_PK_2", "TrackZone_IdZonePrevX").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// Track zone deleted history
    /// </summary>
    /// <KeyProperties>
    /// IdZone
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackZoneDeletedHist")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackZoneDeletedHist : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackZoneDeletedHist object.
        /// </summary>
        /// <param name="idZone">Initial value of IdZone.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackZoneDeletedHist CreateTrackZoneDeletedHist(int idZone, global::System.DateTime modifLast)
        {
            TrackZoneDeletedHist trackZoneDeletedHist = new TrackZoneDeletedHist();
            trackZoneDeletedHist.IdZone = idZone;
            trackZoneDeletedHist.ModifLast = modifLast;
            return trackZoneDeletedHist;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Zone Id coded as: YARD_ID*10000000 + AREA_ID*1000000 + SECTION_ID*10000 + COLUMN*100 + ROW*1
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int IdZone
        {
            get
            {
                int value = _IdZone;
                OnGetIdZone(ref value);
                return value;
            }
            set
            {
                if (_IdZone != value)
                {
                  OnIdZoneChanging(ref value);
                  ReportPropertyChanging("IdZone");
                  _IdZone = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IdZone");
                  OnIdZoneChanged();
              }
            }
        }
        private int _IdZone;
        partial void OnGetIdZone(ref int value);
        partial void OnIdZoneChanging(ref int value);
        partial void OnIdZoneChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion
    }

    /// <summary>
    /// Tracking coordinates of areas in the yard system.
    /// </summary>
    /// <KeyProperties>
    /// Area
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="YmModel", Name="TrackArea")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackArea : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TrackArea object.
        /// </summary>
        /// <param name="area">Initial value of Area.</param>
        /// <param name="yard">Initial value of Yard.</param>
        /// <param name="offsetX">Initial value of OffsetX.</param>
        /// <param name="offsetY">Initial value of OffsetY.</param>
        /// <param name="modifLast">Initial value of ModifLast.</param>
        public static TrackArea CreateTrackArea(string area, string yard, int offsetX, int offsetY, global::System.DateTime modifLast)
        {
            TrackArea trackArea = new TrackArea();
            trackArea.Area = area;
            trackArea.Yard = yard;
            trackArea.OffsetX = offsetX;
            trackArea.OffsetY = offsetY;
            trackArea.ModifLast = modifLast;
            return trackArea;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// AREA ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Area
        {
            get
            {
                string value = _Area;
                OnGetArea(ref value);
                return value;
            }
            set
            {
                if (_Area != value)
                {
                  OnAreaChanging(ref value);
                  ReportPropertyChanging("Area");
                  _Area = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Area");
                  OnAreaChanged();
              }
            }
        }
        private string _Area;
        partial void OnGetArea(ref string value);
        partial void OnAreaChanging(ref string value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// referenced Yard Id
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Yard
        {
            get
            {
                string value = _Yard;
                OnGetYard(ref value);
                return value;
            }
            set
            {
                if (_Yard != value)
                {
                  OnYardChanging(ref value);
                  ReportPropertyChanging("Yard");
                  _Yard = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Yard");
                  OnYardChanged();
              }
            }
        }
        private string _Yard;
        partial void OnGetYard(ref string value);
        partial void OnYardChanging(ref string value);
        partial void OnYardChanged();
    
        /// <summary>
        /// Description of the Area
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// offset of the area measured from an Origin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OffsetX
        {
            get
            {
                int value = _OffsetX;
                OnGetOffsetX(ref value);
                return value;
            }
            set
            {
                if (_OffsetX != value)
                {
                  OnOffsetXChanging(ref value);
                  ReportPropertyChanging("OffsetX");
                  _OffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OffsetX");
                  OnOffsetXChanged();
              }
            }
        }
        private int _OffsetX;
        partial void OnGetOffsetX(ref int value);
        partial void OnOffsetXChanging(ref int value);
        partial void OnOffsetXChanged();
    
        /// <summary>
        /// offset of the area measured from an Origin
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OffsetY
        {
            get
            {
                int value = _OffsetY;
                OnGetOffsetY(ref value);
                return value;
            }
            set
            {
                if (_OffsetY != value)
                {
                  OnOffsetYChanging(ref value);
                  ReportPropertyChanging("OffsetY");
                  _OffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OffsetY");
                  OnOffsetYChanged();
              }
            }
        }
        private int _OffsetY;
        partial void OnGetOffsetY(ref int value);
        partial void OnOffsetYChanging(ref int value);
        partial void OnOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in x direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetX
        {
            get
            {
                int? value = _CameraOffsetX;
                OnGetCameraOffsetX(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetX != value)
                {
                  OnCameraOffsetXChanging(ref value);
                  ReportPropertyChanging("CameraOffsetX");
                  _CameraOffsetX = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetX");
                  OnCameraOffsetXChanged();
              }
            }
        }
        private int? _CameraOffsetX;
        partial void OnGetCameraOffsetX(ref int? value);
        partial void OnCameraOffsetXChanging(ref int? value);
        partial void OnCameraOffsetXChanged();
    
        /// <summary>
        /// default Camera Offset in y direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetY
        {
            get
            {
                int? value = _CameraOffsetY;
                OnGetCameraOffsetY(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetY != value)
                {
                  OnCameraOffsetYChanging(ref value);
                  ReportPropertyChanging("CameraOffsetY");
                  _CameraOffsetY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetY");
                  OnCameraOffsetYChanged();
              }
            }
        }
        private int? _CameraOffsetY;
        partial void OnGetCameraOffsetY(ref int? value);
        partial void OnCameraOffsetYChanging(ref int? value);
        partial void OnCameraOffsetYChanged();
    
        /// <summary>
        /// default Camera Offset in z direction
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CameraOffsetZ
        {
            get
            {
                int? value = _CameraOffsetZ;
                OnGetCameraOffsetZ(ref value);
                return value;
            }
            set
            {
                if (_CameraOffsetZ != value)
                {
                  OnCameraOffsetZChanging(ref value);
                  ReportPropertyChanging("CameraOffsetZ");
                  _CameraOffsetZ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraOffsetZ");
                  OnCameraOffsetZChanged();
              }
            }
        }
        private int? _CameraOffsetZ;
        partial void OnGetCameraOffsetZ(ref int? value);
        partial void OnCameraOffsetZChanging(ref int? value);
        partial void OnCameraOffsetZChanged();
    
        /// <summary>
        /// default Camera Angle measured from x to y in [RAD]. 0=camera looks parallel to X PI/2=camera looks prallel to Y
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleXy
        {
            get
            {
                double? value = _CameraAngleXy;
                OnGetCameraAngleXy(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleXy != value)
                {
                  OnCameraAngleXyChanging(ref value);
                  ReportPropertyChanging("CameraAngleXy");
                  _CameraAngleXy = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleXy");
                  OnCameraAngleXyChanged();
              }
            }
        }
        private double? _CameraAngleXy;
        partial void OnGetCameraAngleXy(ref double? value);
        partial void OnCameraAngleXyChanging(ref double? value);
        partial void OnCameraAngleXyChanged();
    
        /// <summary>
        /// default Camera Angle measured from y to z in [RAD]. 0=camera looks parallel to Y PI/2=camera looks prallel to Z
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual double? CameraAngleYz
        {
            get
            {
                double? value = _CameraAngleYz;
                OnGetCameraAngleYz(ref value);
                return value;
            }
            set
            {
                if (_CameraAngleYz != value)
                {
                  OnCameraAngleYzChanging(ref value);
                  ReportPropertyChanging("CameraAngleYz");
                  _CameraAngleYz = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CameraAngleYz");
                  OnCameraAngleYzChanged();
              }
            }
        }
        private double? _CameraAngleYz;
        partial void OnGetCameraAngleYz(ref double? value);
        partial void OnCameraAngleYzChanging(ref double? value);
        partial void OnCameraAngleYzChanged();
    
        /// <summary>
        /// Timestamp of the last modification: insert or update. This field is assigned automatically by the data base on insertion. Do NOT set this value manually!
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime ModifLast
        {
            get
            {
                global::System.DateTime value = _ModifLast;
                OnGetModifLast(ref value);
                return value;
            }
            set
            {
                if (_ModifLast != value)
                {
                  OnModifLastChanging(ref value);
                  ReportPropertyChanging("ModifLast");
                  _ModifLast = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ModifLast");
                  OnModifLastChanged();
              }
            }
        }
        private global::System.DateTime _ModifLast = DateTime.Now;
        partial void OnGetModifLast(ref global::System.DateTime value);
        partial void OnModifLastChanging(ref global::System.DateTime value);
        partial void OnModifLastChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrackSections in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_39_TRACK_SECTION_TRACK_PK_2", "TrackSections")]
        public virtual EntityCollection<TrackSection> TrackSections
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TrackSection>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackSections");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TrackSection>("YmModel.FK_39_TRACK_SECTION_TRACK_PK_2", "TrackSections", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TrackYard in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("YmModel", "FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard")]
        public virtual TrackYard TrackYard
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrackYard in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrackYard> TrackYardReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrackYard>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrackYard>("YmModel.FK_37_TRACK_AREA_TRACK_YA_PK_1", "TrackYard").Value = null;
                }
            }
        }

        #endregion
    }

}
